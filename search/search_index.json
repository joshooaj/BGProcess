{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>It can be complicated to read from the StandardOutput or StandardError streams on a <code>[System.Diagnostics.Process]</code> object - especially without the risk of blocking the terminal indefinitely.</p> <p>This module is intended to simplify reading the output of a running process, and reacting to it by writing to the StandardInput stream. Imagine for example that you are required to use a command-line utility which cannot be executed with simple command-line arguments. Instead, the utility prompts you to fill in one or more pieces of information. Reading from StandardOutput synchronously can result in locking up your PowerShell session if you call a <code>Read</code> method and there is no data to be read from the stream yet.</p> <p>When you use the <code>Start-BGProcess</code> cmdlet, the process is started and both StandardOutput and StandardError streams are monitored asynchronously. When you use <code>Read-BGProcess</code>, any data available from these streams will be returned without blocking. Combine this with <code>Write-BGProcess</code> and you can easily automate a stubborn command-line tool that is not automation-ready.</p>"},{"location":"#installation","title":"Installation","text":"<p>The module can be installed from PowerShell Gallery by running the command <code>Install-Module -Name BGProcess</code>.</p> <p>To install manually, you can download latest <code>BGProcess.zip</code> file from the Releases section, and extract it to one of your PSModulePath's.</p> <p>Type <code>$env:PSModulePath -split ';'</code> in a PowerShell terminal to see where PowerShell looks for modules on your system.</p> <p>When extracted to a standard module path, the full path to <code>BGProcess.psd1</code> should be similar to...</p> <ul> <li>Current user: C:\\Users\\\\Documents\\WindowsPowerShell\\Modules\\BGProcess\\0.1.0\\BGProcess.psd1 <li>All users: C:\\Program Files\\WindowsPowerShell\\Modules\\BGProcess\\0.1.0\\BGProcess.psd1</li>"},{"location":"#usage","title":"Usage","text":"<p>I can't think of a good reason to use <code>nslookup.exe</code> this way, but it is used as an example because it is readily available on any Windows system and if you launch it without arguments it will present you with a prompt.</p> <p>Here's a simple use case - see the screenshot below to see what it looks like in the terminal. In a more complex scenario you would inspect the response from <code>Read-BGProcess</code> and either wait for some particular string, or branch out and perform different actions depending on the content.</p> <pre><code>$nslookup = Start-BGProcess nslookup # (1)\n$nslookup | Read-BGProcess -Wait -MapErrorsToStdOut # (2)\n$nslookup | Write-BGProcess \"www.powershellgallery.com\" -PassThru | Read-BGProcess -Wait -Timeout (New-TimeSpan -Seconds 3) -MapErrorsToStdOut # (3)\n$nslookup | Write-BGProcess \"exit\" | Wait-BGProcess # (4)\n$nslookup | Format-List # (5)\n</code></pre> <ol> <li>Launches a windowless nslookup <code>[System.Diagnostics.Process]</code> and    encapsulates it in a [BGProcess] class which takes care of monitoring    stdout/stderr for you.</li> <li>Reads any data available on stdout and stderr. The <code>-MapErrorsToStdOut</code>    switch is used here because nslookup writes \"Non-authoritative answer:\" to    stderr and I'd rather see that as part of stdout. Also, since processes    don't always write output all at once, there's a default timeout of 1 second    before <code>Read-BGProcess</code> assumes there is no more data to be read.</li> <li>Writes a DNS name to the StandardInput stream, and then waits until the    process output has been idle for 3 seconds before returning control.</li> <li>Writes \"exit\" to StandardInput, and waits until the <code>nslookup.exe</code> process    exits.</li> <li>Writes the <code>$nslookup</code> <code>[BGProcess]</code> object to the terminal.</li> </ol> <p></p>"},{"location":"#known-issues","title":"Known issues","text":"<ul> <li>When an application writes to both StandardOutput and StandardError, there is   no preservation of order for the output. The StandardError stream is written   out from <code>Read-BGProcess</code> before the StandardOutput stream, so even if the   text in the StandardError stream was written at the very end, it will be   output first. This might be mitigated by switching from reading from the   StandardOutput and StandardError BaseStreams to subscribing to the   OutputDataReceived and ErrorDataReceived events. In theory, these events   should be fired in order, and then it should be easy to maintain the output   order. It may also reduce complexity by eliminating the need for runspaces.</li> <li>On linux, it does not appear that the Exited   event handler gets called, so the <code>ExitCode</code> and <code>HasExited</code> properties do not   seem to be updated automatically. Something to look into.</li> </ul>"},{"location":"CHANGELOG/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#011-2023-02-01","title":"[0.1.1] 2023-02-01","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Updated module manifest.</li> </ul>"},{"location":"CHANGELOG/#010-2023-02-01","title":"[0.1.0] 2023-02-01","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"Functions/Read-BGProcess/","title":"Read-BGProcess","text":""},{"location":"Functions/Read-BGProcess/#synopsis","title":"SYNOPSIS","text":"<p>Reads the redirected StandardOutput and StandardError streams for a process without blocking.</p>"},{"location":"Functions/Read-BGProcess/#syntax","title":"SYNTAX","text":"<pre><code>Read-BGProcess [-Process] &lt;BGProcess&gt; [-MapErrorsToStdOut] [-Wait] [[-Timeout] &lt;TimeSpan&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Functions/Read-BGProcess/#description","title":"DESCRIPTION","text":"<p>When reading from StandardOutput or StandardError, it is easy to accidentally block or deadlock the terminal. For example, if you read from these streams before there is data available to be read, the Read call will be blocked until data is available on that stream or the process is terminated.</p> <p>This cmdlet will wait for up to Timeout seconds, or 1 second by default, before returning with whatever data is available.</p>"},{"location":"Functions/Read-BGProcess/#examples","title":"EXAMPLES","text":""},{"location":"Functions/Read-BGProcess/#example-1","title":"Example 1","text":"<pre><code>$nslookup = Start-BGProcess nslookup\n$nslookup | Read-BGProcess -Wait -Timeout ([timespan]::fromseconds(3))\n$nslookup | Write-BGProcess \"www.powershellgallery.com\" -PassThru | Read-BGProcess -Wait -MapErrorsToStdOut -Timeout ([timespan]::fromseconds(3))\n</code></pre> <p>Queries nslookup for \"www.powershellgallery.com\". Since the nslookup command writes some lines to StandardError like \"Non-authoritative answer:\", the errors are returned as strings along with the rest of StandardOutput.</p>"},{"location":"Functions/Read-BGProcess/#parameters","title":"PARAMETERS","text":""},{"location":"Functions/Read-BGProcess/#-maperrorstostdout","title":"-MapErrorsToStdOut","text":"<p>Causes any data received from the StandardError stream to be returned as a string along with the StandardOutput data, instead of being raised as an ErrorRecord.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Read-BGProcess/#-process","title":"-Process","text":"<p>Specifies the BGProcess instance from which to read StandardOutput and StandardError.</p> <pre><code>Type: BGProcess\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Read-BGProcess/#-timeout","title":"-Timeout","text":"<p>Specifies the amount of time to wait before giving up on receiving any (more) data. The default is 1 second, and this parameter is only effective when used with the -Wait switch.</p> <pre><code>Type: TimeSpan\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Read-BGProcess/#-wait","title":"-Wait","text":"<p>Specifies that the read operation should be retried up until Timeout seconds before returning whatever data has been received.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Read-BGProcess/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"Functions/Read-BGProcess/#inputs","title":"INPUTS","text":""},{"location":"Functions/Read-BGProcess/#bgprocess","title":"BGProcess","text":"<p>This cmdlet accepts a BGProcess object from the pipeline.</p>"},{"location":"Functions/Read-BGProcess/#outputs","title":"OUTPUTS","text":""},{"location":"Functions/Read-BGProcess/#systemstring","title":"System.String","text":"<p>This cmdlet returns zero or more strings, and zero or more ErrorRecords.</p>"},{"location":"Functions/Read-BGProcess/#notes","title":"NOTES","text":""},{"location":"Functions/Read-BGProcess/#related-links","title":"RELATED LINKS","text":"<p>Online Help</p>"},{"location":"Functions/Start-BGProcess/","title":"Start-BGProcess","text":""},{"location":"Functions/Start-BGProcess/#synopsis","title":"SYNOPSIS","text":"<p>Starts a new windowless process with redirected input/output streams.</p>"},{"location":"Functions/Start-BGProcess/#syntax","title":"SYNTAX","text":"<pre><code>Start-BGProcess [-FileName] &lt;String&gt; [[-Arguments] &lt;String[]&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Functions/Start-BGProcess/#description","title":"DESCRIPTION","text":"<p>Starts a new windowless process with redirected input/output streams. This is useful for driving an interactive command-line application from code.</p> <p>The Read-BGProcess and Write-BGProcess cmdlets offer a simplified method of responding to interactive command-line prompts such as the netsh or nslookup prompt for instance.</p> <p>Note that while almost all functionality in netsh and nslookup can be accessed without entering their interactive prompts, not all command-line tools are as automation-friendly. They are used as examples only out of familiarity and because they are broadly available for testing.</p>"},{"location":"Functions/Start-BGProcess/#examples","title":"EXAMPLES","text":""},{"location":"Functions/Start-BGProcess/#example-1","title":"Example 1","text":"<pre><code>$nslookup = Start-BGProcess nslookup\n$nslookup | Read-BGProcess -Wait -MapErrorsToStdOut\n$nslookup | Write-BGProcess \"www.powershellgallery.com\" -PassThru | Read-BGProcess -Wait -Timeout (New-TimeSpan -Seconds 3) -MapErrorsToStdOut\n$nslookup | Write-BGProcess \"exit\" | Wait-BGProcess\n$nslookup | Format-List\n\n&lt;#\nProcess   : System.Diagnostics.Process (nslookup)\nId        : 24028\nName      : nslookup\nExitCode  : 0\nHasExited : True\n#&gt;\n</code></pre> <p>Starts an nslookup.exe process without arguments which places you into an interactive nslookup prompt. The initial StandardOutput text is retrieved, and then we write \"www.powershellgallery.com\" to the StandardInput stream. An Environment.NewLine is appended to the text by default.</p> <p>The response is read from StandardOutput with a timeout value of 3 seconds since the response is not expected to be immediate. Finally, we write \"exit\" to the StandardInput stream and wait for the process to exit before showing the $nslookup object contents.</p>"},{"location":"Functions/Start-BGProcess/#parameters","title":"PARAMETERS","text":""},{"location":"Functions/Start-BGProcess/#-arguments","title":"-Arguments","text":"<p>Specifies one or more optional command-line arguments.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Start-BGProcess/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Start-BGProcess/#-filename","title":"-FileName","text":"<p>Specifies the file name of the application to run.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases: Path\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Start-BGProcess/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Start-BGProcess/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"Functions/Start-BGProcess/#inputs","title":"INPUTS","text":""},{"location":"Functions/Start-BGProcess/#none","title":"None","text":"<p>You can't pipe objects to this cmdlet.</p>"},{"location":"Functions/Start-BGProcess/#outputs","title":"OUTPUTS","text":""},{"location":"Functions/Start-BGProcess/#bgprocess","title":"BGProcess","text":""},{"location":"Functions/Start-BGProcess/#notes","title":"NOTES","text":""},{"location":"Functions/Start-BGProcess/#related-links","title":"RELATED LINKS","text":"<p>Online Help</p>"},{"location":"Functions/Stop-BGProcess/","title":"Stop-BGProcess","text":""},{"location":"Functions/Stop-BGProcess/#synopsis","title":"SYNOPSIS","text":"<p>Stops one or more running processes.</p>"},{"location":"Functions/Stop-BGProcess/#syntax","title":"SYNTAX","text":"<pre><code>Stop-BGProcess [-Process] &lt;BGProcess[]&gt; [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Functions/Stop-BGProcess/#description","title":"DESCRIPTION","text":"<p>The Stop-BGProcess cmdlet stops one or more running processes.</p>"},{"location":"Functions/Stop-BGProcess/#examples","title":"EXAMPLES","text":""},{"location":"Functions/Stop-BGProcess/#example-1","title":"Example 1","text":"<pre><code>$nslookup = Start-BGProcess nslookup\n$nslookup | Stop-BGProcess -PassThru | Wait-BGProcess\n$nslookup\n</code></pre> <p>Starts an interactive nslookup prompt, and then abruptly kills the process. Note that the ExitCode and HasExited properties may not be updated until a second or two has passed, but they should be updated automatically. In this case, by using Wait-BGProcess, we know that the process has exited and the ExitCode value should be available.</p>"},{"location":"Functions/Stop-BGProcess/#parameters","title":"PARAMETERS","text":""},{"location":"Functions/Stop-BGProcess/#-confirm","title":"-Confirm","text":"<p>Prompts you for confirmation before running the cmdlet.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Stop-BGProcess/#-passthru","title":"-PassThru","text":"<p>Specifies that the BGProcess object should be returned to the pipeline.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Stop-BGProcess/#-process","title":"-Process","text":"<p>Specifies the BGProcess object to stop.</p> <pre><code>Type: BGProcess[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Stop-BGProcess/#-whatif","title":"-WhatIf","text":"<p>Shows what would happen if the cmdlet runs. The cmdlet is not run.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Stop-BGProcess/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"Functions/Stop-BGProcess/#inputs","title":"INPUTS","text":""},{"location":"Functions/Stop-BGProcess/#bgprocess","title":"BGProcess","text":"<p>This cmdlet accepts a BGProcess object from the pipeline.</p>"},{"location":"Functions/Stop-BGProcess/#outputs","title":"OUTPUTS","text":""},{"location":"Functions/Stop-BGProcess/#bgprocess_1","title":"BGProcess","text":""},{"location":"Functions/Stop-BGProcess/#notes","title":"NOTES","text":""},{"location":"Functions/Stop-BGProcess/#related-links","title":"RELATED LINKS","text":"<p>Online Help</p>"},{"location":"Functions/Wait-BGProcess/","title":"Wait-BGProcess","text":""},{"location":"Functions/Wait-BGProcess/#synopsis","title":"SYNOPSIS","text":"<p>Waits for the processes to be stopped before accepting more input.</p>"},{"location":"Functions/Wait-BGProcess/#syntax","title":"SYNTAX","text":"<pre><code>Wait-BGProcess [-Process] &lt;BGProcess[]&gt; [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Functions/Wait-BGProcess/#description","title":"DESCRIPTION","text":"<p>The Wait-BGProcess cmdlet waits for one or more running processes to exit.</p>"},{"location":"Functions/Wait-BGProcess/#examples","title":"EXAMPLES","text":""},{"location":"Functions/Wait-BGProcess/#example-1","title":"Example 1","text":"<pre><code>$ping = Start-BGProcess ping 127.0.0.1 -n 10\n$ping | Wait-BGProcess\n$results = $ping | Read-BGProcess -Wait\n</code></pre> <p>Starts a ping to 127.0.0.1, waits until the ping.exe process exits, then reads the results and places the text in $results.</p>"},{"location":"Functions/Wait-BGProcess/#parameters","title":"PARAMETERS","text":""},{"location":"Functions/Wait-BGProcess/#-passthru","title":"-PassThru","text":"<p>Specifies that the BGProcess instance(s) should be returned to the pipeline after the underlying process has stopped.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Wait-BGProcess/#-process","title":"-Process","text":"<p>Specifies one or more BGProcess instances to wait for the underlying process to exit.</p> <pre><code>Type: BGProcess[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Wait-BGProcess/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"Functions/Wait-BGProcess/#inputs","title":"INPUTS","text":""},{"location":"Functions/Wait-BGProcess/#bgprocess","title":"BGProcess","text":"<p>This cmdlet accepts a BGProcess object from the pipeline.</p>"},{"location":"Functions/Wait-BGProcess/#outputs","title":"OUTPUTS","text":""},{"location":"Functions/Wait-BGProcess/#bgprocess_1","title":"BGProcess","text":""},{"location":"Functions/Wait-BGProcess/#notes","title":"NOTES","text":""},{"location":"Functions/Wait-BGProcess/#related-links","title":"RELATED LINKS","text":"<p>Online Help</p>"},{"location":"Functions/Write-BGProcess/","title":"Write-BGProcess","text":""},{"location":"Functions/Write-BGProcess/#synopsis","title":"SYNOPSIS","text":"<p>Writes the specified text to the StandardInput stream of the BGProcess.</p>"},{"location":"Functions/Write-BGProcess/#syntax","title":"SYNTAX","text":"<pre><code>Write-BGProcess -Process &lt;BGProcess&gt; [-Text] &lt;String&gt; [-LineTerminator &lt;String&gt;] [-NoLineTerminator]\n [-PassThru] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Functions/Write-BGProcess/#description","title":"DESCRIPTION","text":"<p>Write-BGProcess writes the value of \"-Text\" to the StandardInput stream of the process encapsulated by the provided BGProcess object. The value of <code>[Environment]::NewLine</code> is automatically appended to the provided text, but the line terminator can be overridden or excluded with the \"-NoLineTerminator\" switch.</p>"},{"location":"Functions/Write-BGProcess/#examples","title":"EXAMPLES","text":""},{"location":"Functions/Write-BGProcess/#example-1","title":"Example 1","text":"<pre><code>$nslookup = Start-BGProcess nslookup\n$nslookup | Read-BGProcess -Wait -MapErrorsToStdOut\n$nslookup | Write-BGProcess \"www.powershellgallery.com\" -PassThru | Read-BGProcess -Wait -Timeout (New-TimeSpan -Seconds 3) -MapErrorsToStdOut\n$nslookup | Write-BGProcess \"exit\" | Wait-BGProcess\n$nslookup | Format-List\n\n&lt;#\nProcess   : System.Diagnostics.Process (nslookup)\nId        : 24028\nName      : nslookup\nExitCode  : 0\nHasExited : True\n#&gt;\n</code></pre> <p>Starts an nslookup.exe process without arguments which places you into an interactive nslookup prompt. The initial StandardOutput text is retrieved, and then we write \"www.powershellgallery.com\" to the StandardInput stream. An Environment.NewLine is appended to the text by default.</p> <p>The response is read from StandardOutput with a timeout value of 3 seconds since the response is not expected to be immediate. Finally, we write \"exit\" to the StandardInput stream and wait for the process to exit before showing the $nslookup object contents.</p>"},{"location":"Functions/Write-BGProcess/#parameters","title":"PARAMETERS","text":""},{"location":"Functions/Write-BGProcess/#-lineterminator","title":"-LineTerminator","text":"<p>Specifies the line ending to add to the value of the \"Text\" parameter. The default value is the environment-specific value of [Environment]::NewLine.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: [Environment]::NewLine\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Write-BGProcess/#-nolineterminator","title":"-NoLineTerminator","text":"<p>Specifies that a line terminator should not be added automatically.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Write-BGProcess/#-passthru","title":"-PassThru","text":"<p>Specifies that the BGProcess object should be returned to the pipeline after writing to the StandardInput stream.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Write-BGProcess/#-process","title":"-Process","text":"<p>Specifies the BGProcess instance to which the value of \"Text\" should be written to StandardInput.</p> <pre><code>Type: BGProcess\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Write-BGProcess/#-text","title":"-Text","text":"<p>Specifies the text to be written to the StandardInput stream of the process encapsulated by the specified BGProcess instance.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Functions/Write-BGProcess/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"Functions/Write-BGProcess/#inputs","title":"INPUTS","text":""},{"location":"Functions/Write-BGProcess/#bgprocess","title":"BGProcess","text":"<p>This cmdlet accepts a BGProcess object from the pipeline.</p>"},{"location":"Functions/Write-BGProcess/#outputs","title":"OUTPUTS","text":""},{"location":"Functions/Write-BGProcess/#bgprocess_1","title":"BGProcess","text":""},{"location":"Functions/Write-BGProcess/#notes","title":"NOTES","text":""},{"location":"Functions/Write-BGProcess/#related-links","title":"RELATED LINKS","text":"<p>Online Help</p>"}]}